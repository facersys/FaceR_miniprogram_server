# -*- coding: utf-8 -*-
import base64
import os
import cv2
import numpy as np
import time

from flask import request
from apps.api import api
from apps.libs import qiniu, mongo
from apps.libs.face import FaceTool
from apps.libs.image_tool import draw_face
from apps.libs.restful import params_error, success
from apps.security import MONGO_USER_COLLECTION


@api.route('/face', methods=["POST"])
def face():
    face_stream = request.files.get('face').read()
    face_code = FaceTool(face_stream)
    print(face_code.encode())
    return "face"


@api.route('/upload_face', methods=["POST"])
def upload_face():
    oid = request.form.get('oid')

    user = mongo.select_one(MONGO_USER_COLLECTION, {'openid': oid})
    if not user:
        return params_error(message='用户不存在')
    filename = "{}-{}-{}-face.png".format(str(int(time.time())), user.get("sid"), user.get("name"))

    face_stream = request.files.get('face_img').read()

    # 进行人脸检测，不存在人脸则不上传
    if not FaceTool(face_stream).is_face():
        return params_error(message='图像上没有人脸')

    # 这里先不更新人脸编码 TODO
    qiniu.upload_file(filename, face_stream)
    return success(data=qiniu.get_file(filename), message='图像上传成功')


@api.route('/fd', methods=['POST'])
def fd():
    filename = "tmp-{}.png".format(str(int(time.time())))
    img_stream = request.files.get('img').read()

    face_ = FaceTool(img_stream)
    face_marks = face_.face_detection()
    if not face_marks:
        return params_error(message='图像中不存在人脸')

    new_img = draw_face(face_.get_face_arr(), face_marks)
    cv2.cvtColor(new_img, cv2.COLOR_BGR2RGB)

    # 图片转化为流存到七牛
    img_encode = cv2.imencode('.png', new_img)[1]
    img_data = np.array(img_encode).tostring()

    data = {
        'face_marks': face_marks,
        'img_url': qiniu.upload_file(filename, img_data)
    }
    return success(data=data, message='检测到了人脸')


@api.route('/fr', methods=['POST'])
def fc():
    filename = "tmp-{}.png".format(str(int(time.time())))
    img_stream = request.files.get('img').read()

    face_ = FaceTool(img_stream)
    if not face_.is_face():
        return params_error(message='图像中不存在人脸')

    results, image = face_.find_face()
    cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # 图片转化为流存到七牛
    img_encode = cv2.imencode('.png', image)[1]
    img_data = np.array(img_encode).tostring()

    data = {
        'results': results,
        'img_url': qiniu.upload_file(filename, img_data)
    }
    return success(data=data, message='检测到了人脸')
